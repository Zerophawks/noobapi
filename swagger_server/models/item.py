# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.item_effects import ItemEffects  # noqa: F401,E501
from swagger_server.models.item_value import ItemValue  # noqa: F401,E501
from swagger_server import util


class Item(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, item_name: str=None, item_type: str=None, description: str=None, weight: float=None, value: ItemValue=None, properties: List[str]=None, rarity: str=None, requires_attunement: bool=None, effects: List[ItemEffects]=None, quantity: int=None):  # noqa: E501
        """Item - a model defined in Swagger

        :param item_name: The item_name of this Item.  # noqa: E501
        :type item_name: str
        :param item_type: The item_type of this Item.  # noqa: E501
        :type item_type: str
        :param description: The description of this Item.  # noqa: E501
        :type description: str
        :param weight: The weight of this Item.  # noqa: E501
        :type weight: float
        :param value: The value of this Item.  # noqa: E501
        :type value: ItemValue
        :param properties: The properties of this Item.  # noqa: E501
        :type properties: List[str]
        :param rarity: The rarity of this Item.  # noqa: E501
        :type rarity: str
        :param requires_attunement: The requires_attunement of this Item.  # noqa: E501
        :type requires_attunement: bool
        :param effects: The effects of this Item.  # noqa: E501
        :type effects: List[ItemEffects]
        :param quantity: The quantity of this Item.  # noqa: E501
        :type quantity: int
        """
        self.swagger_types = {
            'item_name': str,
            'item_type': str,
            'description': str,
            'weight': float,
            'value': ItemValue,
            'properties': List[str],
            'rarity': str,
            'requires_attunement': bool,
            'effects': List[ItemEffects],
            'quantity': int
        }

        self.attribute_map = {
            'item_name': 'itemName',
            'item_type': 'itemType',
            'description': 'description',
            'weight': 'weight',
            'value': 'value',
            'properties': 'properties',
            'rarity': 'rarity',
            'requires_attunement': 'requiresAttunement',
            'effects': 'effects',
            'quantity': 'quantity'
        }
        self._item_name = item_name
        self._item_type = item_type
        self._description = description
        self._weight = weight
        self._value = value
        self._properties = properties
        self._rarity = rarity
        self._requires_attunement = requires_attunement
        self._effects = effects
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_name(self) -> str:
        """Gets the item_name of this Item.


        :return: The item_name of this Item.
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name: str):
        """Sets the item_name of this Item.


        :param item_name: The item_name of this Item.
        :type item_name: str
        """
        if item_name is None:
            raise ValueError("Invalid value for `item_name`, must not be `None`")  # noqa: E501

        self._item_name = item_name

    @property
    def item_type(self) -> str:
        """Gets the item_type of this Item.


        :return: The item_type of this Item.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type: str):
        """Sets the item_type of this Item.


        :param item_type: The item_type of this Item.
        :type item_type: str
        """
        if item_type is None:
            raise ValueError("Invalid value for `item_type`, must not be `None`")  # noqa: E501

        self._item_type = item_type

    @property
    def description(self) -> str:
        """Gets the description of this Item.


        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Item.


        :param description: The description of this Item.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def weight(self) -> float:
        """Gets the weight of this Item.


        :return: The weight of this Item.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight: float):
        """Sets the weight of this Item.


        :param weight: The weight of this Item.
        :type weight: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def value(self) -> ItemValue:
        """Gets the value of this Item.


        :return: The value of this Item.
        :rtype: ItemValue
        """
        return self._value

    @value.setter
    def value(self, value: ItemValue):
        """Sets the value of this Item.


        :param value: The value of this Item.
        :type value: ItemValue
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def properties(self) -> List[str]:
        """Gets the properties of this Item.


        :return: The properties of this Item.
        :rtype: List[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: List[str]):
        """Sets the properties of this Item.


        :param properties: The properties of this Item.
        :type properties: List[str]
        """

        self._properties = properties

    @property
    def rarity(self) -> str:
        """Gets the rarity of this Item.


        :return: The rarity of this Item.
        :rtype: str
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity: str):
        """Sets the rarity of this Item.


        :param rarity: The rarity of this Item.
        :type rarity: str
        """

        self._rarity = rarity

    @property
    def requires_attunement(self) -> bool:
        """Gets the requires_attunement of this Item.


        :return: The requires_attunement of this Item.
        :rtype: bool
        """
        return self._requires_attunement

    @requires_attunement.setter
    def requires_attunement(self, requires_attunement: bool):
        """Sets the requires_attunement of this Item.


        :param requires_attunement: The requires_attunement of this Item.
        :type requires_attunement: bool
        """

        self._requires_attunement = requires_attunement

    @property
    def effects(self) -> List[ItemEffects]:
        """Gets the effects of this Item.


        :return: The effects of this Item.
        :rtype: List[ItemEffects]
        """
        return self._effects

    @effects.setter
    def effects(self, effects: List[ItemEffects]):
        """Sets the effects of this Item.


        :param effects: The effects of this Item.
        :type effects: List[ItemEffects]
        """

        self._effects = effects

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Item.


        :return: The quantity of this Item.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Item.


        :param quantity: The quantity of this Item.
        :type quantity: int
        """

        self._quantity = quantity
