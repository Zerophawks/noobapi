# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.encounter_rewards import EncounterRewards  # noqa: F401,E501
from swagger_server import util


class Encounter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, encounter_name: str=None, description: str=None, location: str=None, difficulty: str=None, monsters: List[str]=None, npcs: List[str]=None, environment: str=None, rewards: EncounterRewards=None, triggers: List[str]=None, outcome: List[str]=None):  # noqa: E501
        """Encounter - a model defined in Swagger

        :param encounter_name: The encounter_name of this Encounter.  # noqa: E501
        :type encounter_name: str
        :param description: The description of this Encounter.  # noqa: E501
        :type description: str
        :param location: The location of this Encounter.  # noqa: E501
        :type location: str
        :param difficulty: The difficulty of this Encounter.  # noqa: E501
        :type difficulty: str
        :param monsters: The monsters of this Encounter.  # noqa: E501
        :type monsters: List[str]
        :param npcs: The npcs of this Encounter.  # noqa: E501
        :type npcs: List[str]
        :param environment: The environment of this Encounter.  # noqa: E501
        :type environment: str
        :param rewards: The rewards of this Encounter.  # noqa: E501
        :type rewards: EncounterRewards
        :param triggers: The triggers of this Encounter.  # noqa: E501
        :type triggers: List[str]
        :param outcome: The outcome of this Encounter.  # noqa: E501
        :type outcome: List[str]
        """
        self.swagger_types = {
            'encounter_name': str,
            'description': str,
            'location': str,
            'difficulty': str,
            'monsters': List[str],
            'npcs': List[str],
            'environment': str,
            'rewards': EncounterRewards,
            'triggers': List[str],
            'outcome': List[str]
        }

        self.attribute_map = {
            'encounter_name': 'encounterName',
            'description': 'description',
            'location': 'location',
            'difficulty': 'difficulty',
            'monsters': 'monsters',
            'npcs': 'npcs',
            'environment': 'environment',
            'rewards': 'rewards',
            'triggers': 'triggers',
            'outcome': 'outcome'
        }
        self._encounter_name = encounter_name
        self._description = description
        self._location = location
        self._difficulty = difficulty
        self._monsters = monsters
        self._npcs = npcs
        self._environment = environment
        self._rewards = rewards
        self._triggers = triggers
        self._outcome = outcome

    @classmethod
    def from_dict(cls, dikt) -> 'Encounter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Encounter of this Encounter.  # noqa: E501
        :rtype: Encounter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encounter_name(self) -> str:
        """Gets the encounter_name of this Encounter.


        :return: The encounter_name of this Encounter.
        :rtype: str
        """
        return self._encounter_name

    @encounter_name.setter
    def encounter_name(self, encounter_name: str):
        """Sets the encounter_name of this Encounter.


        :param encounter_name: The encounter_name of this Encounter.
        :type encounter_name: str
        """
        if encounter_name is None:
            raise ValueError("Invalid value for `encounter_name`, must not be `None`")  # noqa: E501

        self._encounter_name = encounter_name

    @property
    def description(self) -> str:
        """Gets the description of this Encounter.


        :return: The description of this Encounter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Encounter.


        :param description: The description of this Encounter.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def location(self) -> str:
        """Gets the location of this Encounter.


        :return: The location of this Encounter.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Encounter.


        :param location: The location of this Encounter.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def difficulty(self) -> str:
        """Gets the difficulty of this Encounter.


        :return: The difficulty of this Encounter.
        :rtype: str
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty: str):
        """Sets the difficulty of this Encounter.


        :param difficulty: The difficulty of this Encounter.
        :type difficulty: str
        """
        if difficulty is None:
            raise ValueError("Invalid value for `difficulty`, must not be `None`")  # noqa: E501

        self._difficulty = difficulty

    @property
    def monsters(self) -> List[str]:
        """Gets the monsters of this Encounter.


        :return: The monsters of this Encounter.
        :rtype: List[str]
        """
        return self._monsters

    @monsters.setter
    def monsters(self, monsters: List[str]):
        """Sets the monsters of this Encounter.


        :param monsters: The monsters of this Encounter.
        :type monsters: List[str]
        """
        if monsters is None:
            raise ValueError("Invalid value for `monsters`, must not be `None`")  # noqa: E501

        self._monsters = monsters

    @property
    def npcs(self) -> List[str]:
        """Gets the npcs of this Encounter.


        :return: The npcs of this Encounter.
        :rtype: List[str]
        """
        return self._npcs

    @npcs.setter
    def npcs(self, npcs: List[str]):
        """Sets the npcs of this Encounter.


        :param npcs: The npcs of this Encounter.
        :type npcs: List[str]
        """

        self._npcs = npcs

    @property
    def environment(self) -> str:
        """Gets the environment of this Encounter.


        :return: The environment of this Encounter.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment: str):
        """Sets the environment of this Encounter.


        :param environment: The environment of this Encounter.
        :type environment: str
        """

        self._environment = environment

    @property
    def rewards(self) -> EncounterRewards:
        """Gets the rewards of this Encounter.


        :return: The rewards of this Encounter.
        :rtype: EncounterRewards
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards: EncounterRewards):
        """Sets the rewards of this Encounter.


        :param rewards: The rewards of this Encounter.
        :type rewards: EncounterRewards
        """

        self._rewards = rewards

    @property
    def triggers(self) -> List[str]:
        """Gets the triggers of this Encounter.


        :return: The triggers of this Encounter.
        :rtype: List[str]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers: List[str]):
        """Sets the triggers of this Encounter.


        :param triggers: The triggers of this Encounter.
        :type triggers: List[str]
        """

        self._triggers = triggers

    @property
    def outcome(self) -> List[str]:
        """Gets the outcome of this Encounter.


        :return: The outcome of this Encounter.
        :rtype: List[str]
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome: List[str]):
        """Sets the outcome of this Encounter.


        :param outcome: The outcome of this Encounter.
        :type outcome: List[str]
        """

        self._outcome = outcome
