# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user_preferences import UserPreferences  # noqa: F401,E501
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, email: str=None, password: str=None, user_type: str=None, characters: List[str]=None, campaigns: List[str]=None, preferences: UserPreferences=None, date_joined: date=None, last_login: datetime=None, notes: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param user_type: The user_type of this User.  # noqa: E501
        :type user_type: str
        :param characters: The characters of this User.  # noqa: E501
        :type characters: List[str]
        :param campaigns: The campaigns of this User.  # noqa: E501
        :type campaigns: List[str]
        :param preferences: The preferences of this User.  # noqa: E501
        :type preferences: UserPreferences
        :param date_joined: The date_joined of this User.  # noqa: E501
        :type date_joined: date
        :param last_login: The last_login of this User.  # noqa: E501
        :type last_login: datetime
        :param notes: The notes of this User.  # noqa: E501
        :type notes: str
        """
        self.swagger_types = {
            'username': str,
            'email': str,
            'password': str,
            'user_type': str,
            'characters': List[str],
            'campaigns': List[str],
            'preferences': UserPreferences,
            'date_joined': date,
            'last_login': datetime,
            'notes': str
        }

        self.attribute_map = {
            'username': 'username',
            'email': 'email',
            'password': 'password',
            'user_type': 'userType',
            'characters': 'characters',
            'campaigns': 'campaigns',
            'preferences': 'preferences',
            'date_joined': 'dateJoined',
            'last_login': 'lastLogin',
            'notes': 'notes'
        }
        self._username = username
        self._email = email
        self._password = password
        self._user_type = user_type
        self._characters = characters
        self._campaigns = campaigns
        self._preferences = preferences
        self._date_joined = date_joined
        self._last_login = last_login
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def user_type(self) -> str:
        """Gets the user_type of this User.


        :return: The user_type of this User.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type: str):
        """Sets the user_type of this User.


        :param user_type: The user_type of this User.
        :type user_type: str
        """
        if user_type is None:
            raise ValueError("Invalid value for `user_type`, must not be `None`")  # noqa: E501

        self._user_type = user_type

    @property
    def characters(self) -> List[str]:
        """Gets the characters of this User.


        :return: The characters of this User.
        :rtype: List[str]
        """
        return self._characters

    @characters.setter
    def characters(self, characters: List[str]):
        """Sets the characters of this User.


        :param characters: The characters of this User.
        :type characters: List[str]
        """

        self._characters = characters

    @property
    def campaigns(self) -> List[str]:
        """Gets the campaigns of this User.


        :return: The campaigns of this User.
        :rtype: List[str]
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns: List[str]):
        """Sets the campaigns of this User.


        :param campaigns: The campaigns of this User.
        :type campaigns: List[str]
        """

        self._campaigns = campaigns

    @property
    def preferences(self) -> UserPreferences:
        """Gets the preferences of this User.


        :return: The preferences of this User.
        :rtype: UserPreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences: UserPreferences):
        """Sets the preferences of this User.


        :param preferences: The preferences of this User.
        :type preferences: UserPreferences
        """

        self._preferences = preferences

    @property
    def date_joined(self) -> date:
        """Gets the date_joined of this User.


        :return: The date_joined of this User.
        :rtype: date
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined: date):
        """Sets the date_joined of this User.


        :param date_joined: The date_joined of this User.
        :type date_joined: date
        """
        if date_joined is None:
            raise ValueError("Invalid value for `date_joined`, must not be `None`")  # noqa: E501

        self._date_joined = date_joined

    @property
    def last_login(self) -> datetime:
        """Gets the last_login of this User.


        :return: The last_login of this User.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login: datetime):
        """Sets the last_login of this User.


        :param last_login: The last_login of this User.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def notes(self) -> str:
        """Gets the notes of this User.


        :return: The notes of this User.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this User.


        :param notes: The notes of this User.
        :type notes: str
        """

        self._notes = notes
