# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SpellComponents(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, verbal: bool=None, somatic: bool=None, material: bool=None, material_description: str=None):  # noqa: E501
        """SpellComponents - a model defined in Swagger

        :param verbal: The verbal of this SpellComponents.  # noqa: E501
        :type verbal: bool
        :param somatic: The somatic of this SpellComponents.  # noqa: E501
        :type somatic: bool
        :param material: The material of this SpellComponents.  # noqa: E501
        :type material: bool
        :param material_description: The material_description of this SpellComponents.  # noqa: E501
        :type material_description: str
        """
        self.swagger_types = {
            'verbal': bool,
            'somatic': bool,
            'material': bool,
            'material_description': str
        }

        self.attribute_map = {
            'verbal': 'verbal',
            'somatic': 'somatic',
            'material': 'material',
            'material_description': 'materialDescription'
        }
        self._verbal = verbal
        self._somatic = somatic
        self._material = material
        self._material_description = material_description

    @classmethod
    def from_dict(cls, dikt) -> 'SpellComponents':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Spell_components of this SpellComponents.  # noqa: E501
        :rtype: SpellComponents
        """
        return util.deserialize_model(dikt, cls)

    @property
    def verbal(self) -> bool:
        """Gets the verbal of this SpellComponents.


        :return: The verbal of this SpellComponents.
        :rtype: bool
        """
        return self._verbal

    @verbal.setter
    def verbal(self, verbal: bool):
        """Sets the verbal of this SpellComponents.


        :param verbal: The verbal of this SpellComponents.
        :type verbal: bool
        """

        self._verbal = verbal

    @property
    def somatic(self) -> bool:
        """Gets the somatic of this SpellComponents.


        :return: The somatic of this SpellComponents.
        :rtype: bool
        """
        return self._somatic

    @somatic.setter
    def somatic(self, somatic: bool):
        """Sets the somatic of this SpellComponents.


        :param somatic: The somatic of this SpellComponents.
        :type somatic: bool
        """

        self._somatic = somatic

    @property
    def material(self) -> bool:
        """Gets the material of this SpellComponents.


        :return: The material of this SpellComponents.
        :rtype: bool
        """
        return self._material

    @material.setter
    def material(self, material: bool):
        """Sets the material of this SpellComponents.


        :param material: The material of this SpellComponents.
        :type material: bool
        """

        self._material = material

    @property
    def material_description(self) -> str:
        """Gets the material_description of this SpellComponents.


        :return: The material_description of this SpellComponents.
        :rtype: str
        """
        return self._material_description

    @material_description.setter
    def material_description(self, material_description: str):
        """Sets the material_description of this SpellComponents.


        :param material_description: The material_description of this SpellComponents.
        :type material_description: str
        """

        self._material_description = material_description
