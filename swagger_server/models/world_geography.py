# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WorldGeography(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, continents: List[str]=None, oceans: List[str]=None, mountains: List[str]=None, forests: List[str]=None, rivers: List[str]=None, deserts: List[str]=None):  # noqa: E501
        """WorldGeography - a model defined in Swagger

        :param continents: The continents of this WorldGeography.  # noqa: E501
        :type continents: List[str]
        :param oceans: The oceans of this WorldGeography.  # noqa: E501
        :type oceans: List[str]
        :param mountains: The mountains of this WorldGeography.  # noqa: E501
        :type mountains: List[str]
        :param forests: The forests of this WorldGeography.  # noqa: E501
        :type forests: List[str]
        :param rivers: The rivers of this WorldGeography.  # noqa: E501
        :type rivers: List[str]
        :param deserts: The deserts of this WorldGeography.  # noqa: E501
        :type deserts: List[str]
        """
        self.swagger_types = {
            'continents': List[str],
            'oceans': List[str],
            'mountains': List[str],
            'forests': List[str],
            'rivers': List[str],
            'deserts': List[str]
        }

        self.attribute_map = {
            'continents': 'continents',
            'oceans': 'oceans',
            'mountains': 'mountains',
            'forests': 'forests',
            'rivers': 'rivers',
            'deserts': 'deserts'
        }
        self._continents = continents
        self._oceans = oceans
        self._mountains = mountains
        self._forests = forests
        self._rivers = rivers
        self._deserts = deserts

    @classmethod
    def from_dict(cls, dikt) -> 'WorldGeography':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The World_geography of this WorldGeography.  # noqa: E501
        :rtype: WorldGeography
        """
        return util.deserialize_model(dikt, cls)

    @property
    def continents(self) -> List[str]:
        """Gets the continents of this WorldGeography.


        :return: The continents of this WorldGeography.
        :rtype: List[str]
        """
        return self._continents

    @continents.setter
    def continents(self, continents: List[str]):
        """Sets the continents of this WorldGeography.


        :param continents: The continents of this WorldGeography.
        :type continents: List[str]
        """

        self._continents = continents

    @property
    def oceans(self) -> List[str]:
        """Gets the oceans of this WorldGeography.


        :return: The oceans of this WorldGeography.
        :rtype: List[str]
        """
        return self._oceans

    @oceans.setter
    def oceans(self, oceans: List[str]):
        """Sets the oceans of this WorldGeography.


        :param oceans: The oceans of this WorldGeography.
        :type oceans: List[str]
        """

        self._oceans = oceans

    @property
    def mountains(self) -> List[str]:
        """Gets the mountains of this WorldGeography.


        :return: The mountains of this WorldGeography.
        :rtype: List[str]
        """
        return self._mountains

    @mountains.setter
    def mountains(self, mountains: List[str]):
        """Sets the mountains of this WorldGeography.


        :param mountains: The mountains of this WorldGeography.
        :type mountains: List[str]
        """

        self._mountains = mountains

    @property
    def forests(self) -> List[str]:
        """Gets the forests of this WorldGeography.


        :return: The forests of this WorldGeography.
        :rtype: List[str]
        """
        return self._forests

    @forests.setter
    def forests(self, forests: List[str]):
        """Sets the forests of this WorldGeography.


        :param forests: The forests of this WorldGeography.
        :type forests: List[str]
        """

        self._forests = forests

    @property
    def rivers(self) -> List[str]:
        """Gets the rivers of this WorldGeography.


        :return: The rivers of this WorldGeography.
        :rtype: List[str]
        """
        return self._rivers

    @rivers.setter
    def rivers(self, rivers: List[str]):
        """Sets the rivers of this WorldGeography.


        :param rivers: The rivers of this WorldGeography.
        :type rivers: List[str]
        """

        self._rivers = rivers

    @property
    def deserts(self) -> List[str]:
        """Gets the deserts of this WorldGeography.


        :return: The deserts of this WorldGeography.
        :rtype: List[str]
        """
        return self._deserts

    @deserts.setter
    def deserts(self, deserts: List[str]):
        """Sets the deserts of this WorldGeography.


        :param deserts: The deserts of this WorldGeography.
        :type deserts: List[str]
        """

        self._deserts = deserts
