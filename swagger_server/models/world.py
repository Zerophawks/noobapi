# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.world_geography import WorldGeography  # noqa: F401,E501
from swagger_server.models.world_politics import WorldPolitics  # noqa: F401,E501
from swagger_server import util


class World(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, world_name: str=None, description: str=None, geography: WorldGeography=None, politics: WorldPolitics=None):  # noqa: E501
        """World - a model defined in Swagger

        :param world_name: The world_name of this World.  # noqa: E501
        :type world_name: str
        :param description: The description of this World.  # noqa: E501
        :type description: str
        :param geography: The geography of this World.  # noqa: E501
        :type geography: WorldGeography
        :param politics: The politics of this World.  # noqa: E501
        :type politics: WorldPolitics
        """
        self.swagger_types = {
            'world_name': str,
            'description': str,
            'geography': WorldGeography,
            'politics': WorldPolitics
        }

        self.attribute_map = {
            'world_name': 'worldName',
            'description': 'description',
            'geography': 'geography',
            'politics': 'politics'
        }
        self._world_name = world_name
        self._description = description
        self._geography = geography
        self._politics = politics

    @classmethod
    def from_dict(cls, dikt) -> 'World':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The World of this World.  # noqa: E501
        :rtype: World
        """
        return util.deserialize_model(dikt, cls)

    @property
    def world_name(self) -> str:
        """Gets the world_name of this World.


        :return: The world_name of this World.
        :rtype: str
        """
        return self._world_name

    @world_name.setter
    def world_name(self, world_name: str):
        """Sets the world_name of this World.


        :param world_name: The world_name of this World.
        :type world_name: str
        """
        if world_name is None:
            raise ValueError("Invalid value for `world_name`, must not be `None`")  # noqa: E501

        self._world_name = world_name

    @property
    def description(self) -> str:
        """Gets the description of this World.


        :return: The description of this World.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this World.


        :param description: The description of this World.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def geography(self) -> WorldGeography:
        """Gets the geography of this World.


        :return: The geography of this World.
        :rtype: WorldGeography
        """
        return self._geography

    @geography.setter
    def geography(self, geography: WorldGeography):
        """Sets the geography of this World.


        :param geography: The geography of this World.
        :type geography: WorldGeography
        """
        if geography is None:
            raise ValueError("Invalid value for `geography`, must not be `None`")  # noqa: E501

        self._geography = geography

    @property
    def politics(self) -> WorldPolitics:
        """Gets the politics of this World.


        :return: The politics of this World.
        :rtype: WorldPolitics
        """
        return self._politics

    @politics.setter
    def politics(self, politics: WorldPolitics):
        """Sets the politics of this World.


        :param politics: The politics of this World.
        :type politics: WorldPolitics
        """
        if politics is None:
            raise ValueError("Invalid value for `politics`, must not be `None`")  # noqa: E501

        self._politics = politics
