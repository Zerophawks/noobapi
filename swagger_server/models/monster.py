# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.character_attributes import CharacterAttributes  # noqa: F401,E501
from swagger_server.models.monster_hit_points import MonsterHitPoints  # noqa: F401,E501
from swagger_server.models.monster_special_abilities import MonsterSpecialAbilities  # noqa: F401,E501
from swagger_server import util


class Monster(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, type: str=None, size: str=None, alignment: str=None, challenge_rating: str=None, hit_points: MonsterHitPoints=None, armor_class: int=None, speed: str=None, attributes: CharacterAttributes=None, skills: Dict[str, int]=None, senses: str=None, languages: str=None, special_abilities: List[MonsterSpecialAbilities]=None, actions: List[MonsterSpecialAbilities]=None, legendary_actions: List[MonsterSpecialAbilities]=None):  # noqa: E501
        """Monster - a model defined in Swagger

        :param name: The name of this Monster.  # noqa: E501
        :type name: str
        :param type: The type of this Monster.  # noqa: E501
        :type type: str
        :param size: The size of this Monster.  # noqa: E501
        :type size: str
        :param alignment: The alignment of this Monster.  # noqa: E501
        :type alignment: str
        :param challenge_rating: The challenge_rating of this Monster.  # noqa: E501
        :type challenge_rating: str
        :param hit_points: The hit_points of this Monster.  # noqa: E501
        :type hit_points: MonsterHitPoints
        :param armor_class: The armor_class of this Monster.  # noqa: E501
        :type armor_class: int
        :param speed: The speed of this Monster.  # noqa: E501
        :type speed: str
        :param attributes: The attributes of this Monster.  # noqa: E501
        :type attributes: CharacterAttributes
        :param skills: The skills of this Monster.  # noqa: E501
        :type skills: Dict[str, int]
        :param senses: The senses of this Monster.  # noqa: E501
        :type senses: str
        :param languages: The languages of this Monster.  # noqa: E501
        :type languages: str
        :param special_abilities: The special_abilities of this Monster.  # noqa: E501
        :type special_abilities: List[MonsterSpecialAbilities]
        :param actions: The actions of this Monster.  # noqa: E501
        :type actions: List[MonsterSpecialAbilities]
        :param legendary_actions: The legendary_actions of this Monster.  # noqa: E501
        :type legendary_actions: List[MonsterSpecialAbilities]
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            'size': str,
            'alignment': str,
            'challenge_rating': str,
            'hit_points': MonsterHitPoints,
            'armor_class': int,
            'speed': str,
            'attributes': CharacterAttributes,
            'skills': Dict[str, int],
            'senses': str,
            'languages': str,
            'special_abilities': List[MonsterSpecialAbilities],
            'actions': List[MonsterSpecialAbilities],
            'legendary_actions': List[MonsterSpecialAbilities]
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'size': 'size',
            'alignment': 'alignment',
            'challenge_rating': 'challengeRating',
            'hit_points': 'hitPoints',
            'armor_class': 'armorClass',
            'speed': 'speed',
            'attributes': 'attributes',
            'skills': 'skills',
            'senses': 'senses',
            'languages': 'languages',
            'special_abilities': 'specialAbilities',
            'actions': 'actions',
            'legendary_actions': 'legendaryActions'
        }
        self._name = name
        self._type = type
        self._size = size
        self._alignment = alignment
        self._challenge_rating = challenge_rating
        self._hit_points = hit_points
        self._armor_class = armor_class
        self._speed = speed
        self._attributes = attributes
        self._skills = skills
        self._senses = senses
        self._languages = languages
        self._special_abilities = special_abilities
        self._actions = actions
        self._legendary_actions = legendary_actions

    @classmethod
    def from_dict(cls, dikt) -> 'Monster':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Monster of this Monster.  # noqa: E501
        :rtype: Monster
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Monster.


        :return: The name of this Monster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Monster.


        :param name: The name of this Monster.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this Monster.


        :return: The type of this Monster.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Monster.


        :param type: The type of this Monster.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def size(self) -> str:
        """Gets the size of this Monster.


        :return: The size of this Monster.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: str):
        """Sets the size of this Monster.


        :param size: The size of this Monster.
        :type size: str
        """

        self._size = size

    @property
    def alignment(self) -> str:
        """Gets the alignment of this Monster.


        :return: The alignment of this Monster.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment: str):
        """Sets the alignment of this Monster.


        :param alignment: The alignment of this Monster.
        :type alignment: str
        """

        self._alignment = alignment

    @property
    def challenge_rating(self) -> str:
        """Gets the challenge_rating of this Monster.


        :return: The challenge_rating of this Monster.
        :rtype: str
        """
        return self._challenge_rating

    @challenge_rating.setter
    def challenge_rating(self, challenge_rating: str):
        """Sets the challenge_rating of this Monster.


        :param challenge_rating: The challenge_rating of this Monster.
        :type challenge_rating: str
        """
        if challenge_rating is None:
            raise ValueError("Invalid value for `challenge_rating`, must not be `None`")  # noqa: E501

        self._challenge_rating = challenge_rating

    @property
    def hit_points(self) -> MonsterHitPoints:
        """Gets the hit_points of this Monster.


        :return: The hit_points of this Monster.
        :rtype: MonsterHitPoints
        """
        return self._hit_points

    @hit_points.setter
    def hit_points(self, hit_points: MonsterHitPoints):
        """Sets the hit_points of this Monster.


        :param hit_points: The hit_points of this Monster.
        :type hit_points: MonsterHitPoints
        """
        if hit_points is None:
            raise ValueError("Invalid value for `hit_points`, must not be `None`")  # noqa: E501

        self._hit_points = hit_points

    @property
    def armor_class(self) -> int:
        """Gets the armor_class of this Monster.


        :return: The armor_class of this Monster.
        :rtype: int
        """
        return self._armor_class

    @armor_class.setter
    def armor_class(self, armor_class: int):
        """Sets the armor_class of this Monster.


        :param armor_class: The armor_class of this Monster.
        :type armor_class: int
        """
        if armor_class is None:
            raise ValueError("Invalid value for `armor_class`, must not be `None`")  # noqa: E501

        self._armor_class = armor_class

    @property
    def speed(self) -> str:
        """Gets the speed of this Monster.


        :return: The speed of this Monster.
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed: str):
        """Sets the speed of this Monster.


        :param speed: The speed of this Monster.
        :type speed: str
        """

        self._speed = speed

    @property
    def attributes(self) -> CharacterAttributes:
        """Gets the attributes of this Monster.


        :return: The attributes of this Monster.
        :rtype: CharacterAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: CharacterAttributes):
        """Sets the attributes of this Monster.


        :param attributes: The attributes of this Monster.
        :type attributes: CharacterAttributes
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def skills(self) -> Dict[str, int]:
        """Gets the skills of this Monster.


        :return: The skills of this Monster.
        :rtype: Dict[str, int]
        """
        return self._skills

    @skills.setter
    def skills(self, skills: Dict[str, int]):
        """Sets the skills of this Monster.


        :param skills: The skills of this Monster.
        :type skills: Dict[str, int]
        """

        self._skills = skills

    @property
    def senses(self) -> str:
        """Gets the senses of this Monster.


        :return: The senses of this Monster.
        :rtype: str
        """
        return self._senses

    @senses.setter
    def senses(self, senses: str):
        """Sets the senses of this Monster.


        :param senses: The senses of this Monster.
        :type senses: str
        """

        self._senses = senses

    @property
    def languages(self) -> str:
        """Gets the languages of this Monster.


        :return: The languages of this Monster.
        :rtype: str
        """
        return self._languages

    @languages.setter
    def languages(self, languages: str):
        """Sets the languages of this Monster.


        :param languages: The languages of this Monster.
        :type languages: str
        """

        self._languages = languages

    @property
    def special_abilities(self) -> List[MonsterSpecialAbilities]:
        """Gets the special_abilities of this Monster.


        :return: The special_abilities of this Monster.
        :rtype: List[MonsterSpecialAbilities]
        """
        return self._special_abilities

    @special_abilities.setter
    def special_abilities(self, special_abilities: List[MonsterSpecialAbilities]):
        """Sets the special_abilities of this Monster.


        :param special_abilities: The special_abilities of this Monster.
        :type special_abilities: List[MonsterSpecialAbilities]
        """

        self._special_abilities = special_abilities

    @property
    def actions(self) -> List[MonsterSpecialAbilities]:
        """Gets the actions of this Monster.


        :return: The actions of this Monster.
        :rtype: List[MonsterSpecialAbilities]
        """
        return self._actions

    @actions.setter
    def actions(self, actions: List[MonsterSpecialAbilities]):
        """Sets the actions of this Monster.


        :param actions: The actions of this Monster.
        :type actions: List[MonsterSpecialAbilities]
        """

        self._actions = actions

    @property
    def legendary_actions(self) -> List[MonsterSpecialAbilities]:
        """Gets the legendary_actions of this Monster.


        :return: The legendary_actions of this Monster.
        :rtype: List[MonsterSpecialAbilities]
        """
        return self._legendary_actions

    @legendary_actions.setter
    def legendary_actions(self, legendary_actions: List[MonsterSpecialAbilities]):
        """Sets the legendary_actions of this Monster.


        :param legendary_actions: The legendary_actions of this Monster.
        :type legendary_actions: List[MonsterSpecialAbilities]
        """

        self._legendary_actions = legendary_actions
