# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.character_attributes import CharacterAttributes  # noqa: F401,E501
from swagger_server.models.character_hit_points import CharacterHitPoints  # noqa: F401,E501
from swagger_server.models.character_skills import CharacterSkills  # noqa: F401,E501
from swagger_server import util


class Character(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, character_name: str=None, class_and_level: str=None, race: str=None, background: str=None, alignment: str=None, player_name: str=None, experience_points: int=None, attributes: CharacterAttributes=None, skills: CharacterSkills=None, hit_points: CharacterHitPoints=None, equipment: List[str]=None, features_and_traits: List[str]=None, personality_traits: str=None, ideals: str=None, bonds: str=None, flaws: str=None):  # noqa: E501
        """Character - a model defined in Swagger

        :param character_name: The character_name of this Character.  # noqa: E501
        :type character_name: str
        :param class_and_level: The class_and_level of this Character.  # noqa: E501
        :type class_and_level: str
        :param race: The race of this Character.  # noqa: E501
        :type race: str
        :param background: The background of this Character.  # noqa: E501
        :type background: str
        :param alignment: The alignment of this Character.  # noqa: E501
        :type alignment: str
        :param player_name: The player_name of this Character.  # noqa: E501
        :type player_name: str
        :param experience_points: The experience_points of this Character.  # noqa: E501
        :type experience_points: int
        :param attributes: The attributes of this Character.  # noqa: E501
        :type attributes: CharacterAttributes
        :param skills: The skills of this Character.  # noqa: E501
        :type skills: CharacterSkills
        :param hit_points: The hit_points of this Character.  # noqa: E501
        :type hit_points: CharacterHitPoints
        :param equipment: The equipment of this Character.  # noqa: E501
        :type equipment: List[str]
        :param features_and_traits: The features_and_traits of this Character.  # noqa: E501
        :type features_and_traits: List[str]
        :param personality_traits: The personality_traits of this Character.  # noqa: E501
        :type personality_traits: str
        :param ideals: The ideals of this Character.  # noqa: E501
        :type ideals: str
        :param bonds: The bonds of this Character.  # noqa: E501
        :type bonds: str
        :param flaws: The flaws of this Character.  # noqa: E501
        :type flaws: str
        """
        self.swagger_types = {
            'character_name': str,
            'class_and_level': str,
            'race': str,
            'background': str,
            'alignment': str,
            'player_name': str,
            'experience_points': int,
            'attributes': CharacterAttributes,
            'skills': CharacterSkills,
            'hit_points': CharacterHitPoints,
            'equipment': List[str],
            'features_and_traits': List[str],
            'personality_traits': str,
            'ideals': str,
            'bonds': str,
            'flaws': str
        }

        self.attribute_map = {
            'character_name': 'characterName',
            'class_and_level': 'classAndLevel',
            'race': 'race',
            'background': 'background',
            'alignment': 'alignment',
            'player_name': 'playerName',
            'experience_points': 'experiencePoints',
            'attributes': 'attributes',
            'skills': 'skills',
            'hit_points': 'hitPoints',
            'equipment': 'equipment',
            'features_and_traits': 'featuresAndTraits',
            'personality_traits': 'personalityTraits',
            'ideals': 'ideals',
            'bonds': 'bonds',
            'flaws': 'flaws'
        }
        self._character_name = character_name
        self._class_and_level = class_and_level
        self._race = race
        self._background = background
        self._alignment = alignment
        self._player_name = player_name
        self._experience_points = experience_points
        self._attributes = attributes
        self._skills = skills
        self._hit_points = hit_points
        self._equipment = equipment
        self._features_and_traits = features_and_traits
        self._personality_traits = personality_traits
        self._ideals = ideals
        self._bonds = bonds
        self._flaws = flaws

    @classmethod
    def from_dict(cls, dikt) -> 'Character':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Character of this Character.  # noqa: E501
        :rtype: Character
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_name(self) -> str:
        """Gets the character_name of this Character.


        :return: The character_name of this Character.
        :rtype: str
        """
        return self._character_name

    @character_name.setter
    def character_name(self, character_name: str):
        """Sets the character_name of this Character.


        :param character_name: The character_name of this Character.
        :type character_name: str
        """
        if character_name is None:
            raise ValueError("Invalid value for `character_name`, must not be `None`")  # noqa: E501

        self._character_name = character_name

    @property
    def class_and_level(self) -> str:
        """Gets the class_and_level of this Character.


        :return: The class_and_level of this Character.
        :rtype: str
        """
        return self._class_and_level

    @class_and_level.setter
    def class_and_level(self, class_and_level: str):
        """Sets the class_and_level of this Character.


        :param class_and_level: The class_and_level of this Character.
        :type class_and_level: str
        """
        if class_and_level is None:
            raise ValueError("Invalid value for `class_and_level`, must not be `None`")  # noqa: E501

        self._class_and_level = class_and_level

    @property
    def race(self) -> str:
        """Gets the race of this Character.


        :return: The race of this Character.
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race: str):
        """Sets the race of this Character.


        :param race: The race of this Character.
        :type race: str
        """
        if race is None:
            raise ValueError("Invalid value for `race`, must not be `None`")  # noqa: E501

        self._race = race

    @property
    def background(self) -> str:
        """Gets the background of this Character.


        :return: The background of this Character.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background: str):
        """Sets the background of this Character.


        :param background: The background of this Character.
        :type background: str
        """

        self._background = background

    @property
    def alignment(self) -> str:
        """Gets the alignment of this Character.


        :return: The alignment of this Character.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment: str):
        """Sets the alignment of this Character.


        :param alignment: The alignment of this Character.
        :type alignment: str
        """

        self._alignment = alignment

    @property
    def player_name(self) -> str:
        """Gets the player_name of this Character.


        :return: The player_name of this Character.
        :rtype: str
        """
        return self._player_name

    @player_name.setter
    def player_name(self, player_name: str):
        """Sets the player_name of this Character.


        :param player_name: The player_name of this Character.
        :type player_name: str
        """

        self._player_name = player_name

    @property
    def experience_points(self) -> int:
        """Gets the experience_points of this Character.


        :return: The experience_points of this Character.
        :rtype: int
        """
        return self._experience_points

    @experience_points.setter
    def experience_points(self, experience_points: int):
        """Sets the experience_points of this Character.


        :param experience_points: The experience_points of this Character.
        :type experience_points: int
        """

        self._experience_points = experience_points

    @property
    def attributes(self) -> CharacterAttributes:
        """Gets the attributes of this Character.


        :return: The attributes of this Character.
        :rtype: CharacterAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: CharacterAttributes):
        """Sets the attributes of this Character.


        :param attributes: The attributes of this Character.
        :type attributes: CharacterAttributes
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def skills(self) -> CharacterSkills:
        """Gets the skills of this Character.


        :return: The skills of this Character.
        :rtype: CharacterSkills
        """
        return self._skills

    @skills.setter
    def skills(self, skills: CharacterSkills):
        """Sets the skills of this Character.


        :param skills: The skills of this Character.
        :type skills: CharacterSkills
        """
        if skills is None:
            raise ValueError("Invalid value for `skills`, must not be `None`")  # noqa: E501

        self._skills = skills

    @property
    def hit_points(self) -> CharacterHitPoints:
        """Gets the hit_points of this Character.


        :return: The hit_points of this Character.
        :rtype: CharacterHitPoints
        """
        return self._hit_points

    @hit_points.setter
    def hit_points(self, hit_points: CharacterHitPoints):
        """Sets the hit_points of this Character.


        :param hit_points: The hit_points of this Character.
        :type hit_points: CharacterHitPoints
        """
        if hit_points is None:
            raise ValueError("Invalid value for `hit_points`, must not be `None`")  # noqa: E501

        self._hit_points = hit_points

    @property
    def equipment(self) -> List[str]:
        """Gets the equipment of this Character.


        :return: The equipment of this Character.
        :rtype: List[str]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment: List[str]):
        """Sets the equipment of this Character.


        :param equipment: The equipment of this Character.
        :type equipment: List[str]
        """

        self._equipment = equipment

    @property
    def features_and_traits(self) -> List[str]:
        """Gets the features_and_traits of this Character.


        :return: The features_and_traits of this Character.
        :rtype: List[str]
        """
        return self._features_and_traits

    @features_and_traits.setter
    def features_and_traits(self, features_and_traits: List[str]):
        """Sets the features_and_traits of this Character.


        :param features_and_traits: The features_and_traits of this Character.
        :type features_and_traits: List[str]
        """

        self._features_and_traits = features_and_traits

    @property
    def personality_traits(self) -> str:
        """Gets the personality_traits of this Character.


        :return: The personality_traits of this Character.
        :rtype: str
        """
        return self._personality_traits

    @personality_traits.setter
    def personality_traits(self, personality_traits: str):
        """Sets the personality_traits of this Character.


        :param personality_traits: The personality_traits of this Character.
        :type personality_traits: str
        """

        self._personality_traits = personality_traits

    @property
    def ideals(self) -> str:
        """Gets the ideals of this Character.


        :return: The ideals of this Character.
        :rtype: str
        """
        return self._ideals

    @ideals.setter
    def ideals(self, ideals: str):
        """Sets the ideals of this Character.


        :param ideals: The ideals of this Character.
        :type ideals: str
        """

        self._ideals = ideals

    @property
    def bonds(self) -> str:
        """Gets the bonds of this Character.


        :return: The bonds of this Character.
        :rtype: str
        """
        return self._bonds

    @bonds.setter
    def bonds(self, bonds: str):
        """Sets the bonds of this Character.


        :param bonds: The bonds of this Character.
        :type bonds: str
        """

        self._bonds = bonds

    @property
    def flaws(self) -> str:
        """Gets the flaws of this Character.


        :return: The flaws of this Character.
        :rtype: str
        """
        return self._flaws

    @flaws.setter
    def flaws(self, flaws: str):
        """Sets the flaws of this Character.


        :param flaws: The flaws of this Character.
        :type flaws: str
        """

        self._flaws = flaws
