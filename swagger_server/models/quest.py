# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.quest_rewards import QuestRewards  # noqa: F401,E501
from swagger_server import util


class Quest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, quest_name: str=None, description: str=None, quest_giver: str=None, objectives: List[str]=None, location: str=None, rewards: QuestRewards=None, required_level: int=None, recommended_party_size: int=None, status: str=None, storyline: str=None, notes: str=None):  # noqa: E501
        """Quest - a model defined in Swagger

        :param quest_name: The quest_name of this Quest.  # noqa: E501
        :type quest_name: str
        :param description: The description of this Quest.  # noqa: E501
        :type description: str
        :param quest_giver: The quest_giver of this Quest.  # noqa: E501
        :type quest_giver: str
        :param objectives: The objectives of this Quest.  # noqa: E501
        :type objectives: List[str]
        :param location: The location of this Quest.  # noqa: E501
        :type location: str
        :param rewards: The rewards of this Quest.  # noqa: E501
        :type rewards: QuestRewards
        :param required_level: The required_level of this Quest.  # noqa: E501
        :type required_level: int
        :param recommended_party_size: The recommended_party_size of this Quest.  # noqa: E501
        :type recommended_party_size: int
        :param status: The status of this Quest.  # noqa: E501
        :type status: str
        :param storyline: The storyline of this Quest.  # noqa: E501
        :type storyline: str
        :param notes: The notes of this Quest.  # noqa: E501
        :type notes: str
        """
        self.swagger_types = {
            'quest_name': str,
            'description': str,
            'quest_giver': str,
            'objectives': List[str],
            'location': str,
            'rewards': QuestRewards,
            'required_level': int,
            'recommended_party_size': int,
            'status': str,
            'storyline': str,
            'notes': str
        }

        self.attribute_map = {
            'quest_name': 'questName',
            'description': 'description',
            'quest_giver': 'questGiver',
            'objectives': 'objectives',
            'location': 'location',
            'rewards': 'rewards',
            'required_level': 'requiredLevel',
            'recommended_party_size': 'recommendedPartySize',
            'status': 'status',
            'storyline': 'storyline',
            'notes': 'notes'
        }
        self._quest_name = quest_name
        self._description = description
        self._quest_giver = quest_giver
        self._objectives = objectives
        self._location = location
        self._rewards = rewards
        self._required_level = required_level
        self._recommended_party_size = recommended_party_size
        self._status = status
        self._storyline = storyline
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt) -> 'Quest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Quest of this Quest.  # noqa: E501
        :rtype: Quest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quest_name(self) -> str:
        """Gets the quest_name of this Quest.


        :return: The quest_name of this Quest.
        :rtype: str
        """
        return self._quest_name

    @quest_name.setter
    def quest_name(self, quest_name: str):
        """Sets the quest_name of this Quest.


        :param quest_name: The quest_name of this Quest.
        :type quest_name: str
        """
        if quest_name is None:
            raise ValueError("Invalid value for `quest_name`, must not be `None`")  # noqa: E501

        self._quest_name = quest_name

    @property
    def description(self) -> str:
        """Gets the description of this Quest.


        :return: The description of this Quest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Quest.


        :param description: The description of this Quest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def quest_giver(self) -> str:
        """Gets the quest_giver of this Quest.


        :return: The quest_giver of this Quest.
        :rtype: str
        """
        return self._quest_giver

    @quest_giver.setter
    def quest_giver(self, quest_giver: str):
        """Sets the quest_giver of this Quest.


        :param quest_giver: The quest_giver of this Quest.
        :type quest_giver: str
        """
        if quest_giver is None:
            raise ValueError("Invalid value for `quest_giver`, must not be `None`")  # noqa: E501

        self._quest_giver = quest_giver

    @property
    def objectives(self) -> List[str]:
        """Gets the objectives of this Quest.


        :return: The objectives of this Quest.
        :rtype: List[str]
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives: List[str]):
        """Sets the objectives of this Quest.


        :param objectives: The objectives of this Quest.
        :type objectives: List[str]
        """
        if objectives is None:
            raise ValueError("Invalid value for `objectives`, must not be `None`")  # noqa: E501

        self._objectives = objectives

    @property
    def location(self) -> str:
        """Gets the location of this Quest.


        :return: The location of this Quest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Quest.


        :param location: The location of this Quest.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def rewards(self) -> QuestRewards:
        """Gets the rewards of this Quest.


        :return: The rewards of this Quest.
        :rtype: QuestRewards
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards: QuestRewards):
        """Sets the rewards of this Quest.


        :param rewards: The rewards of this Quest.
        :type rewards: QuestRewards
        """
        if rewards is None:
            raise ValueError("Invalid value for `rewards`, must not be `None`")  # noqa: E501

        self._rewards = rewards

    @property
    def required_level(self) -> int:
        """Gets the required_level of this Quest.


        :return: The required_level of this Quest.
        :rtype: int
        """
        return self._required_level

    @required_level.setter
    def required_level(self, required_level: int):
        """Sets the required_level of this Quest.


        :param required_level: The required_level of this Quest.
        :type required_level: int
        """

        self._required_level = required_level

    @property
    def recommended_party_size(self) -> int:
        """Gets the recommended_party_size of this Quest.


        :return: The recommended_party_size of this Quest.
        :rtype: int
        """
        return self._recommended_party_size

    @recommended_party_size.setter
    def recommended_party_size(self, recommended_party_size: int):
        """Sets the recommended_party_size of this Quest.


        :param recommended_party_size: The recommended_party_size of this Quest.
        :type recommended_party_size: int
        """

        self._recommended_party_size = recommended_party_size

    @property
    def status(self) -> str:
        """Gets the status of this Quest.


        :return: The status of this Quest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Quest.


        :param status: The status of this Quest.
        :type status: str
        """

        self._status = status

    @property
    def storyline(self) -> str:
        """Gets the storyline of this Quest.


        :return: The storyline of this Quest.
        :rtype: str
        """
        return self._storyline

    @storyline.setter
    def storyline(self, storyline: str):
        """Sets the storyline of this Quest.


        :param storyline: The storyline of this Quest.
        :type storyline: str
        """

        self._storyline = storyline

    @property
    def notes(self) -> str:
        """Gets the notes of this Quest.


        :return: The notes of this Quest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this Quest.


        :param notes: The notes of this Quest.
        :type notes: str
        """

        self._notes = notes
